@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="vertical">
    <NavLink href="" Match="NavLinkMatch.All">
        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
    </NavLink>

    <NavLink href="auth">
        <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
    </NavLink>

    <AuthorizeView>
        <Authorized>
            <NavLink href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
            </NavLink>
            <form action="Connect/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button class="button ghost" type="submit">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <NavLink href="Account/Register">
                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
            </NavLink>
            <NavLink href="Account/Login">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </NotAuthorized>
    </AuthorizeView>
</nav>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

